PO-HAO CHEN

Question 1.1
The TreeMap inside Concord keeps the entries in order.
Why can't we just use its iterator or a for-each loop to visit the values in order?
(Hint: there's iterator code like this in the print method of Concord.)

A: the order of entries is based on key in TreeMap instead of value.

Question 2.1 Report to the TA five of the most frequently occurring words in the English language based on what you find in the results.
(It doesn't have to be the absolute top five words.)

poe.txt
the 168
i 109
of 75
a 62
and 62

melville.txt
the 603
i 519
to 432
and 376
of 359


Question 2.2 For each file report to the TA the most frequently occurring word in that file that is not one of the most frequently occurring words in the English language.
For each of your answers, tell why it occurs so frequently in this file.


poe.txt
amontillado 17


melville.txt
bartleby 118


Question 2.3 In what order do words that have the same frequency appear in your output? Why?
(Hint: look at the documentation of the sort method you called.) Would they be in a different order if we had used a HashMap?
A: order by key alphabet
because when key1 == key2, it will be ordered by default which is based on TreeMap


Q3.1: Why don't we need to save the LargeWordPred object in a variable (second call above)?
A: for simplifying, only use once

Q3.2: What are the longest non-hyphenated words occurring in each of melville.txt and poe.txt? how long are they?
how many times did each of them occur in the original file?
(Note: there may be multiple words that are the longest.)

A:
java ConcordDriver3 16 < melville.txt | grep -v '-'
10:obstreperousness 1
14:unreasonableness 1

java ConcordDriver3 15 < poe.txt
connoisseurship 1


